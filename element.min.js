customElements.define("mark-down",class extends HTMLElement{connectedCallback(markdown=(str=>{let id,counter=0,codes={};return str=str.replace(/```([\s\S]+?)```/g,((match,code)=>(codes[id="precode"+counter++]="<pre><code>"+code.split("\n").map((l=>l.trim())).filter(Boolean).join("\n")+"</code></pre>",id))),Object.keys(codes).reduce(((html,id)=>html.replace(id,codes[id])),[[/#{6}\s?([^\n]+)/g,"<h6>$1</h6>"],[/#{5}\s?([^\n]+)/g,"<h5>$1</h5>"],[/#{4}\s?([^\n]+)/g,"<h4>$1</h4>"],[/#{3}\s?([^\n]+)/g,"<h3>$1</h3>"],[/#{2}\s?([^\n]+)/g,"<h2>$1</h2>"],[/#{1}\s?([^\n]+)/g,"<h1>$1</h1>"],[/\*\*\s?([^\n]+)\*\*/g,"<b>$1</b>"],[/__([^_]+)__/g,"<b>$1</b>"],[/\*\s?([^\n]+)\*/g,"<i>$1</i>"],[/_([^_`]+)_/g,"<i>$1</i>"],[/```([\s\S]+?)```/g,"<code><pre>$1</pre></code>"],[/([^\n]+\n?)/g,"<p>$1</p>"],[/([^\n]+)(\+)([^\n]+)/g,"<ul><li>$3</li></ul>"],[/([^\n]+)(\*)([^\n]+)/g,"<ul><li>$3</li></ul>"],[/!\[([^\]]+)\]\(([^)]+)\s"([^")]+)"\)/g,'<img src="$2" alt="$1" title="$3">'],[/\[([^\]]+)\]\(([^)]+)\)/g,'<a href="$2">$1</a>']].reduce(((html,rgx)=>html.replace(...rgx)),str))})){setTimeout((()=>this.innerHTML=markdown(this.innerHTML)))}});